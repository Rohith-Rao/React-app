{"version":3,"sources":["components/Quiz.js","components/Start.js","App.js","reportWebVitals.js","index.js"],"names":["QuizWindow","styled","div","Options","Option","button","Title","h1","Points","p","Question","Quiz","props","useState","quiz","setQuiz","number","setNumber","pts","setPts","shuffle","arr","sort","Math","random","pickAnswer","e","userAnswer","target","outerText","answer","useEffect","topic","axios","get","then","res","data","results","map","item","question","options","incorrect_answers","correct_answer","catch","err","console","error","log","dangerouslySetInnerHTML","__html","index","onClick","className","window","location","reload","Start","check","setcheck","topicname","settopic","name","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98c48390.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport styled from 'styled-components'\r\nimport axios from 'axios'\r\nconst QuizWindow = styled.div`\r\n    text-align: center;\r\n    font-size: clamp(20px, 2.5vw, 24px);\r\n    margin-top: 10vh;\r\n`;\r\n\r\nconst Options = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 70%;\r\n    margin: 2em auto;\r\n    @media screen and (min-width: 1180px) {\r\n        width: 50%;\r\n    }\r\n`;\r\n\r\nconst Option = styled.button`\r\n    display: block;\r\n    border: 1px solid #616A94;\r\n    border-radius: 15px;\r\n    padding: 15px 30px;\r\n    text-decoration: none;\r\n    color: #616A94;\r\n    background-color: #161A31;\r\n    transition: 0.3s;\r\n    font-size: 1em;\r\n    outline: none;\r\n    user-select: none;\r\n    margin-top: 1em;\r\n    cursor: pointer;\r\n    \r\n    @media screen and (min-width: 1180px) {\r\n        &:hover {\r\n            color: white;\r\n            background-color: #616A94;\r\n        }\r\n    }\r\n`;\r\nconst Title = styled.h1`\r\n    margin-top: 4em;\r\n    font-size: 48px;\r\n`;\r\n\r\nconst Points = styled.p`\r\n    font-size: 24px;\r\n    margin-bottom: 3em;\r\n`;\r\nconst Question = styled.div`\r\n    width: 70%;\r\n    margin: 0 auto;\r\n`;\r\n\r\nconst Quiz = (props) => {\r\n    const refreshPage = () => window.location.reload();\r\n\r\n    const [quiz, setQuiz] = useState([]);\r\n    const [number, setNumber] = useState(0);\r\n    const [pts, setPts] = useState(0);\r\n\r\n    const shuffle = (arr) => arr.sort(() => Math.random() - 0.5);\r\n\r\n    const pickAnswer = (e) => {\r\n\r\n        let userAnswer = e.target.outerText;\r\n\r\n        if (quiz[number].answer === userAnswer) setPts(pts + 1);\r\n        setNumber(number + 1);\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.topic==='GK'){\r\n            axios.get('https://opentdb.com/api.php?amount=5&category=9&difficulty=medium&type=multiple')\r\n            .then(res=>{\r\n                setQuiz(res.data.results.map(item =>(\r\n                    {\r\n                        question : item.question,\r\n                        options :  shuffle([...item.incorrect_answers, item.correct_answer]),\r\n                        answer : item.correct_answer\r\n                    }\r\n                )));\r\n            })\r\n            .catch(err=>{console.error(err)})\r\n        }\r\n        else if (props.topic==='Computers') {\r\n            axios.get('https://opentdb.com/api.php?amount=5&category=18&difficulty=medium&type=multiple')\r\n            .then(res=>{\r\n                setQuiz(res.data.results.map(item =>(\r\n                    {\r\n                        question : item.question,\r\n                        options :  shuffle([...item.incorrect_answers, item.correct_answer]),\r\n                        answer : item.correct_answer\r\n                    }\r\n                )));\r\n            })\r\n            .catch(err=>{console.error(err)})\r\n        }\r\n        else if (props.topic==='Films') {\r\n            axios.get('https://opentdb.com/api.php?amount=5&category=11&difficulty=medium&type=multiple')\r\n            .then(res=>{\r\n                setQuiz(res.data.results.map(item =>(\r\n                    {\r\n                        question : item.question,\r\n                        options :  shuffle([...item.incorrect_answers, item.correct_answer]),\r\n                        answer : item.correct_answer\r\n                    }\r\n                )));\r\n            })\r\n            .catch(err=>{console.error(err)})\r\n        }\r\n        else if (props.topic==='Celebs') {\r\n            axios.get('https://opentdb.com/api.php?amount=5&category=26&difficulty=medium&type=multiple')\r\n            .then(res=>{\r\n                setQuiz(res.data.results.map(item =>(\r\n                    {\r\n                        question : item.question,\r\n                        options :  shuffle([...item.incorrect_answers, item.correct_answer]),\r\n                        answer : item.correct_answer\r\n                    }\r\n                )));\r\n            })\r\n            .catch(err=>{console.error(err)})\r\n        }\r\n        else if (props.topic==='Music') {\r\n            axios.get('https://opentdb.com/api.php?amount=5&category=12&difficulty=medium&type=multiple')\r\n            .then(res=>{\r\n                setQuiz(res.data.results.map(item =>(\r\n                    {\r\n                        question : item.question,\r\n                        options :  shuffle([...item.incorrect_answers, item.correct_answer]),\r\n                        answer : item.correct_answer\r\n                    }\r\n                )));\r\n            })\r\n            .catch(err=>{console.error(err)})\r\n        }\r\n    }, []);\r\n    console.log(quiz)\r\n    return (\r\n        <QuizWindow>\r\n            { quiz[number] &&\r\n\r\n                <>\r\n                    <Question dangerouslySetInnerHTML={{ __html: quiz[number].question }}></Question>\r\n\r\n                    <Options>\r\n                        {quiz[number].options.map((item, index) => (\r\n                            <Option key={index} dangerouslySetInnerHTML={{ __html: item }} onClick={pickAnswer}></Option>\r\n                        ))}\r\n                    </Options>\r\n                </>\r\n\r\n            }\r\n            {\r\n                number === 5 &&\r\n                <>\r\n                    <Title>Finished</Title>\r\n                    <Points>Your score {pts}/5</Points>\r\n                    <button className=\"button\" onClick={refreshPage}>Retry</button>\r\n                </>\r\n            }\r\n        </QuizWindow>\r\n    )\r\n}\r\nexport default Quiz","import React,{useState} from 'react'\r\nimport './Start.css'\r\nimport Quiz from './Quiz'\r\nfunction Start(){\r\n    const topics = ['GK','Computers','Films','Celebs','Music']\r\n    const [check,setcheck] = useState(false)\r\n    const [topicname,settopic] = useState(\"\")\r\n    function clickhandle(name){\r\n        setcheck(true)\r\n        settopic(name)\r\n    }\r\n    return(\r\n        <div>\r\n            {check?( <Quiz topic={topicname}/>): (<>\r\n            <h1 className=\"heading\">Pick a topic and start quiz</h1>\r\n            <div className=\"options\"></div>\r\n            {topics.map((item,index) =>(<button key={index} className=\"button\" onClick={()=>clickhandle(item)}>{item}</button>))}\r\n            </>)}\r\n        </div>\r\n    )\r\n}\r\nexport default Start","import './App.css';\nimport Start from './components/Start';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Start />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}